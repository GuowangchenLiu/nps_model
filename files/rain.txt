1、CDN
	·什么是CDN
	·CDN有什么用
	·CDN的工作原理是什么
2、OSI七层模型
	·应用层
		·具体应用的协议
			·HTML、FTP、SMAP、DNS
	·表示层
		·规定数据格式的转换
			·比如ASCII、TLS
	·会话层
		·负责应用程序之间通信的建立
	·传输层
		·管理两个节点之间的数据传输，确保数据传输的可靠性
		·TCP、UDP区别
			·TCP面向连接 -> 三握四挥
			·TCP可靠，UDP不可靠
				·TCP流量控制、拥塞控制、重发机制、确认报文、滑动窗口
			·TCP面向字节流，不保留报文边界；UDP面向报文
				·TCP可能会发生粘包，因为使用了nagle算法（一段时间的IO操作都放在缓冲区，一次性发送过去），解决方法 -> 拆包/封包
			·TCP头部开销大至少20字节，UDP开销小8字节
			·
	·网络层
		·路由寻址 TCP/IP协议，负责提供通信服务
	·数据链路层
		·/* 将0，1的二进制信号封装成具有意义的数据帧发送给对方 */
		·把网络层交下来的IP数据包添加首部和尾部封装成帧
	·物理层
		·光纤等物理设备，传输0，1光电信号
3、TCP拥塞控制
	·什么是拥塞控制
		·通过增减单次发送的数据量，找到当前网络的承载量，TCP超时有两种情况，网络阻塞 和 数据丢包，拥塞控制主要针对第一种情况
	·为什么要拥塞控制？
		·服务端发送数据时，需要客户端接收后并返回ack包才能确认客户端确实接收到了数据
		·如果服务端发送数据太快，用户来不及接收数据，然后没有返回ack包，服务端会认为客户端没有收到数据，进而继续发送数据，导致拥塞
	·怎么做拥塞控制？
		·拥塞窗口  ->  一次性发送多少数据包成为拥塞窗口
		·慢启动  ->  指数增长
		·拥塞避免  ->  线性增长
		·如果超时，标记一下此时拥塞窗口的最大值为M
		·将慢启动的阈值设置为M/2，此时也可以叫快速恢复
		·然后继续开始拥塞避免
4、TCP流量控制
5、TCP丢包控制
6、TCP协议为什么是可靠的？
	·通过序列号和确认号确保数据不会重复发送和接收  ->  结合滑动窗口
		·数据包丢包
		·ack包丢包
	·三握四挥确保通信可靠
	·超时重发机制
		·超时重发时间：RTT+抖动+一定值
	·快速重发机制
		·连续收到三个相同的ack包，触发快速重发
	·流量控制
		·利用滑动窗口机制确保发送方的发送速度能让接受方来得及接受
		·发送方的发送窗口大小=Min(接收方的发送窗口大小，自身的拥塞窗口大小)
	·拥塞控制
		·主要是为了避免数据一下子涌入网络，导致超出最大负荷
		·实现方式
			·慢启动
				·设置一个慢启动阈值，拥塞窗口大小在这个阈值以下指数增长
			·拥塞避免
				·达到慢启动阈值后，拥塞窗口的大小开始线性增长，当网络发生拥塞时（没有按时收到确认），就将慢启动阈值设为目前拥塞窗口大小的一半，将拥塞窗口大小设为1
			·快重传
				·当发生超时重发/快速重发时，不会讲窗口归零，而是将拥塞窗口大小和慢启动阈值同时设为目前拥塞窗口的一半
			·快恢复
				·快重传后，又开始拥塞避免，此阶段成为快恢复
	·滑动窗口提高传输的效率
		·客户端在发送了数据包后，不用等待确认应答，而是可以继续将滑动窗口中所有的数据包发送过去，滑动窗口就是不需要等待确认就可以继续发送的数据的最大值
		·客户端确认应答后，根据ack序列号改变滑动窗口的位置，发送新的数据
		·滑动窗口+重发控制
			·数据包丢丢包
				·假如客户端接收到了0-1000的数据包，但是1001-2000的数据包丢包了，客户端会向服务端发送ack包，表示自己想要1001开始的数据包，发送三次后就会认为数据丢失了，需要重发，触发快速重发
				·如果都丢包了，会触发超时重发
			·ack丢包
				·前面的ack丢包没关系，只要后面的ack包正常，也能确认前面的数据包没有丢包
				·如果都丢包了，会触发超时重发
7、DNS协议
	·什么是DNS协议
		·DNS全称是domain name system，域名系统。
		·DNS协议的主要作用是提供将域名转换为IP地址的服务
	·DNS的查询过程
		·DNS的查询是一个迭代+递归的过程
		·首先会查询浏览器、操作系统是否有DNS的缓存，如果有，直接调用
		·然后会先向local DNS服务器发送DNS查询报文，之后的请求由local DNS服务器代为发送，最后将查询结果返回本地，这一过程成为递归查询
		·然后local DNS服务器先向根域名服务器发起请求，根DNS服务器返回对应的顶级DNS服务器的地址
		·然后local DNS服务器再向顶级DNS服务器发送请求，顶级DNS服务器返回对应的权威DNS服务器的地址
		·然后local DNS服务器.....
		·最终在权威DNS服务器获取到了IP地址，返回给了本地
	·DNS之TCP/UDP
		·区域查询--TCP
		·DNS请求--UDP
	·DNS Prefetch
		·DNS缓存可以减少DNS请求的次数
		·DNS预解析则可以减少DNS请求的时间
	·DNS劫持
		·HTTP-DNS服务器
8、三握四挥->各个状态
9、TCP连接的本质是什么？
	·本质就是交换双方的状态
10、设计模式
	·简单工厂模式
		·工厂模式内定义了创建类方法，根据输入的不同来返回不同的类
		·Vue中的createElement方法创建虚拟DOM
		·缺点是可拓展性不强，违反了开闭原则
	·单例模式
		·一个类只有一个实例，并且提供了一个访问他的全局访问点
		·Vue中的store
		·缺点是强耦合，不利于调试
	·观察者模式
		·定义了一种一对多的模式，观察者同时监听发布者，当发布者状态发生变化时就会通知所有的观察者
		·Vue的响应式视图
	·代理模式
		·ES6-proxy
		·事件代理
11、TCP和UDP对比
	·是否可靠：
	·是否支持广播
	·开销
12、三次握手的泛洪攻击
13、csrf
	·是什么？
	·原理？
	·防范
		·验证码
		·请求头中加入token，而不是在cookie中
		·sameSite
		·表单中嵌入一个hiden的随机token，保证这个token不被猜到
		·同源检测
14、xss
	·是什么？
	·原理？
		·存储型
		·反射型
		·DOM型 ->  攻击富文本节点
	·防范
		·输入过滤 -> 转义
		·a标签的href禁止JavaScript开头
		·不使用富文本 ->  防范DOM型
			·不用innerHTML/v-HTML/dangerouslySetInnerHTML
		·有些api能将字符串作为代码运行，不要往这些API传入不可信的数据
			·setT/I、eval
		·httpOnly防止cookie泄漏
		·CSP：内容安全策略禁止外部资源的加载
15、cookie
	·name value domain path secure httpOnly max-age expires samesite sameparty size priority 
16、no-cache和no-store
17、public和private
18、server push和websocket有什么区别？
19、输入网页-浏览器解析全过程。
	·DNS解析
		·浏览器缓存->本地hosts缓存->本地DNS服务器缓存
	·TCP三次握手
	·如果是HTTPS协议，还会进行TLS协商进行密钥交换
	·服务器处理请求，并响应
	·浏览器解析、渲染
	·TCP四次挥手
20、前端高并发
	·webpack打包压缩
	·CDN静态资源缓存
	·强缓存、协商缓存
	·懒加载
	·base64
21、将jwt放在cookie还是localStorage中？
	·cookie中可以设置httpOnly保护不被获取，但是容易遭受csrf攻击
	·localStorage容易遭受xss攻击
22、登录相关
	·OAuth
		·授权码登录
		·密码式
	·jwt
	·二维码登录
		·二维码（二维码ID、PC设备信息） -> 根据字符串可以生成一个唯一的二维码
		·用户扫码 -> 服务器发现用户扫了码
		·二维码（二维码ID、PC设备信息、用户账号），显示已扫码（此处会轮向服务器轮询以更新二维码状态）
		·用户确认登录，认证token，如果正确，则登录
